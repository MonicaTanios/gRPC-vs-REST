/**
 * @fileoverview gRPC-Web generated client stub for simpledata
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: data_service.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.simpledata.SimpleDataServiceClient');
goog.provide('proto.simpledata.SimpleDataServicePromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.simpledata.LargeDataLine');
goog.require('proto.simpledata.LargeDataRequest');
goog.require('proto.simpledata.RecordsRequest');
goog.require('proto.simpledata.RecordsResponse');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.simpledata.SimpleDataServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.simpledata.SimpleDataServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simpledata.RecordsRequest,
 *   !proto.simpledata.RecordsResponse>}
 */
const methodDescriptor_SimpleDataService_GetRecords = new grpc.web.MethodDescriptor(
  '/simpledata.SimpleDataService/GetRecords',
  grpc.web.MethodType.UNARY,
  proto.simpledata.RecordsRequest,
  proto.simpledata.RecordsResponse,
  /**
   * @param {!proto.simpledata.RecordsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.simpledata.RecordsResponse.deserializeBinary
);


/**
 * @param {!proto.simpledata.RecordsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.simpledata.RecordsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.simpledata.RecordsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.simpledata.SimpleDataServiceClient.prototype.getRecords =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/simpledata.SimpleDataService/GetRecords',
      request,
      metadata || {},
      methodDescriptor_SimpleDataService_GetRecords,
      callback);
};


/**
 * @param {!proto.simpledata.RecordsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.simpledata.RecordsResponse>}
 *     Promise that resolves to the response
 */
proto.simpledata.SimpleDataServicePromiseClient.prototype.getRecords =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/simpledata.SimpleDataService/GetRecords',
      request,
      metadata || {},
      methodDescriptor_SimpleDataService_GetRecords);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simpledata.LargeDataRequest,
 *   !proto.simpledata.LargeDataLine>}
 */
const methodDescriptor_SimpleDataService_StreamLargeData = new grpc.web.MethodDescriptor(
  '/simpledata.SimpleDataService/StreamLargeData',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.simpledata.LargeDataRequest,
  proto.simpledata.LargeDataLine,
  /**
   * @param {!proto.simpledata.LargeDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.simpledata.LargeDataLine.deserializeBinary
);


/**
 * @param {!proto.simpledata.LargeDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.simpledata.LargeDataLine>}
 *     The XHR Node Readable Stream
 */
proto.simpledata.SimpleDataServiceClient.prototype.streamLargeData =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/simpledata.SimpleDataService/StreamLargeData',
      request,
      metadata || {},
      methodDescriptor_SimpleDataService_StreamLargeData);
};


/**
 * @param {!proto.simpledata.LargeDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.simpledata.LargeDataLine>}
 *     The XHR Node Readable Stream
 */
proto.simpledata.SimpleDataServicePromiseClient.prototype.streamLargeData =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/simpledata.SimpleDataService/StreamLargeData',
      request,
      metadata || {},
      methodDescriptor_SimpleDataService_StreamLargeData);
};


}); // goog.scope

